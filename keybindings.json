[
  // snippets
  {
    "key": "alt+c",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "const $1 = "
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+a",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "$1 = [$2]"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+a",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "const [$2] = $1"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+o",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "$1 = {$2}"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+o",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "const {$2} = $1"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+p",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "$1: $2,"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+f",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "($1) => {$2}"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+f",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "$1 => $2"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+r",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "return "
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+t",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "$1 ? $2 : "
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+i",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "if ($1) {$2}"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+y",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "type $1 = "
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+,",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "<$1>$2</$1>"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+,",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "<$1 />"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+n",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "className="
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+i",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "import $2 from '$1'"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+i",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "import { $2 } from '$1'"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+x",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "export "
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+x",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "export { $2 } from '$1'"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+l",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "console.log($1)"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+l",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "console.log('$1:', $1)"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+space",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "$0 "
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+tab",
    "command": "jumpToNextSnippetPlaceholder",
    "when": "hasNextTabstop && inSnippetMode && textInputFocus"
  },

  // editors
  {
    "key": "cmd+1",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "cmd+2",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "cmd+3",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "cmd+4",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "cmd+5",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "cmd+6",
    "command": "workbench.action.openEditorAtIndex6"
  },
  {
    "key": "cmd+t",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "cmd+i",
    "command": "git.openChange"
  },
  {
    "key": "cmd+o",
    "command": "git.openFile"
  },
  {
    "key": "cmd+\\",
    "command": "workbench.action.keepEditor"
  },
  {
    "key": "cmd+f",
    "command": "actions.find"
  },
  {
    "key": "cmd+r",
    "command": "references-view.findReferences"
  },
  {
    "key": "cmd+h",
    "command": "references-view.showCallHierarchy"
  },
  {
    "key": "cmd+y",
    "command": "editor.action.goToTypeDefinition"
  },
  {
    "key": "cmd+9",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "cmd+0",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  {
    "key": "cmd+]",
    "command": "workbench.action.moveEditorToRightGroup"
  },
  {
    "key": "cmd+[",
    "command": "workbench.action.moveEditorToLeftGroup"
  },

  // workbench
  {
    "key": "shift+cmd+o",
    "command": "workbench.action.files.openFileFolder"
  },
  {
    "key": "shift+cmd+h",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "shift+cmd+a",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "shift+cmd+\\",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "shift+cmd+e",
    "command": "workbench.view.explorer"
  },
  {
    "key": "shift+cmd+y",
    "command": "workbench.view.extension.typescript-explorer"
  },
  {
    "key": "shift+cmd+d",
    "command": "workbench.view.debug"
  },
  {
    "key": "shift+cmd+r",
    "command": "workbench.view.extension.references-view"
  },
  {
    "key": "shift+cmd+x",
    "command": "workbench.view.extensions"
  },
  {
    "key": "shift+cmd+s",
    "command": "workbench.view.scm"
  },
  {
    "key": "shift+cmd+/",
    "command": "workbench.panel.chat.view.copilot.focus"
  },
  {
    "key": "shift+cmd+g",
    "command": "workbench.view.extension.github-pull-requests"
  },
  {
    "key": "shift+cmd+u",
    "command": "prStatus:github.focus"
  },
  {
    "key": "shift+cmd+p",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "shift+cmd+j",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "shift+cmd+1",
    "command": "workbench.actions.view.problems"
  },
  {
    "key": "shift+cmd+2",
    "command": "workbench.action.output.toggleOutput"
  },
  {
    "key": "shift+cmd+3",
    "command": "workbench.debug.action.toggleRepl"
  },
  {
    "key": "shift+cmd+4",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  {
    "key": "shift+cmd+5",
    "command": "workbench.panel.comments"
  },
  {
    "key": "shift+cmd+k",
    "command": "workbench.action.openGlobalKeybindings"
  },
  {
    "key": "shift+cmd+f",
    "command": "search.action.openEditor"
  },
  {
    "key": "shift+cmd+m",
    "command": "workbench.action.toggleZenMode"
  },
  {
    "key": "shift+cmd+i",
    "command": "git-graph.view"
  },
  {
    "key": "shift+cmd+c",
    "command": "workbench.files.action.collapseExplorerFolders"
  },
  {
    "key": "shift+cmd+w",
    "command": "workbench.action.closeAllGroups"
  },
  {
    "key": "shift+cmd+`",
    "command": "workbench.action.quickSwitchWindow"
  },
  {
    "key": "shift+cmd+;",
    "command": "workbench.action.chat.openInEditor"
  },
  {
    "key": "shift+cmd+'",
    "command": "workbench.action.chat.openInSidebar"
  },
  {
    "key": "shift+cmd+b",
    "command": "bookmarks.listFromAllFiles"
  },
  {
    "key": "ctrl+alt+cmd+b",
    "command": "bookmarks.toggleLabeled"
  },
  {
    "key": "shift+cmd+,",
    "command": "workbench.action.openSettings"
  },

  // escape
  {
    "key": "escape",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "auxiliaryBarFocus || sideBarFocus"
  },

  // cursor
  {
    "key": "ctrl+shift+up",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+down",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },

  // lines
  {
    "key": "shift+cmd+backspace",
    "command": "editor.action.deleteLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+cmd+enter",
    "command": "runCommands",
    "args": {
      "commands": ["editor.action.insertLineAfter", "deleteAllLeft"]
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+cmd+enter",
    "command": "runCommands",
    "args": {
      "commands": ["editor.action.insertLineBefore", "deleteAllLeft"]
    },
    "when": "editorTextFocus && !editorReadonly"
  },

  // words
  {
    "key": "alt+-",
    "command": "deleteInsideWord",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+=",
    "command": "runCommands",
    "args": {
      "commands": ["deleteInsideWord", "deleteRight"]
    },
    "when": "editorTextFocus && !editorReadonly"
  },

  // select
  {
    "key": "alt+8",
    "command": "bracket-select.select"
  },
  {
    "key": "alt+'",
    "command": "extension.selectEitherQuote",
    "when": "editorFocus"
  },
  {
    "key": "alt+`",
    "command": "extension.selectBackTick",
    "when": "editorFocus"
  },
  {
    "key": "alt+9",
    "command": "extension.selectParenthesis",
    "when": "editorFocus"
  },
  {
    "key": "alt+[",
    "command": "extension.selectSquareBrackets",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+[",
    "command": "extension.selectCurlyBrackets",
    "when": "editorFocus"
  },

  // bracketeer
  {
    "key": "alt+]",
    "command": "bracketeer.removeBrackets"
  },
  {
    "key": "alt+\\",
    "command": "bracketeer.removeQuotes"
  },
  {
    "key": "shift+alt+]",
    "command": "bracketeer.changeBracketsTo"
  },
  {
    "key": "shift+alt+\\",
    "command": "bracketeer.changeQuotesTo"
  },

  // format
  {
    "key": "cmd+e",
    "command": "eslint.executeAutofix",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+p",
    "command": "prettier.forceFormatDocument",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+u",
    "command": "typescript.removeUnusedImports",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+l",
    "command": "remove-all-console-logs.RemoveConsoleLogs",
    "when": "editorTextFocus && !editorReadonly"
  },

  // text-transformer
  {
    "key": "alt+cmd+l",
    "command": "text-transformer.lower",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+u",
    "command": "text-transformer.upper",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+s",
    "command": "text-transformer.underline",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+k",
    "command": "text-transformer.dashed",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+c",
    "command": "text-transformer.camel",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+p",
    "command": "text-transformer.pascal"
  },
  {
    "key": "alt+cmd+space",
    "command": "text-transformer.camel_space",
    "when": "editorTextFocus"
  },

  // copy
  {
    "key": "alt+cmd+n",
    "command": "copy-file-name.copyFileName"
  },
  {
    "key": "alt+cmd+c",
    "command": "copyRelativeFilePath"
  },
  {
    "key": "alt+cmd+b",
    "command": "copy-branch-name.copy-current"
  },

  // problems
  {
    "key": "cmd+=",
    "command": "editor.action.marker.next"
  },
  {
    "key": "cmd+-",
    "command": "editor.action.marker.prev"
  },
  {
    "key": "shift+cmd+-",
    "command": "editor.action.marker.prevInFiles"
  },
  {
    "key": "shift+cmd+=",
    "command": "editor.action.marker.nextInFiles"
  },

  // explorer
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },

  // search
  {
    "key": "cmd+i",
    "command": "search.action.focusFilesToInclude",
    "when": "inSearchEditor"
  },
  {
    "key": "cmd+e",
    "command": "search.action.focusFilesToExclude",
    "when": "inSearchEditor"
  },

  // find
  {
    "key": "cmd+r",
    "command": "editor.action.startFindReplaceAction",
    "when": "findWidgetVisible"
  },

  // scm
  {
    "key": "cmd+e",
    "command": "runCommands",
    "args": {
      "commands": ["list.focusFirst", "list.select"]
    },
    "when": "activeAuxiliary == 'workbench.view.scm' && auxiliaryBarFocus"
  },
  {
    "key": "cmd+c",
    "command": "runCommands",
    "args": {
      "commands": [
        "list.focusFirst",
        "list.focusDown",
        "list.focusDown",
        "list.focusDown"
      ]
    },
    "when": "activeAuxiliary == 'workbench.view.scm' && auxiliaryBarFocus"
  },
  {
    "key": "cmd+enter",
    "command": "git.stage",
    "when": "activeAuxiliary == 'workbench.view.scm' && auxiliaryBarFocus && !inputFocus"
  },
  {
    "key": "cmd+backspace",
    "command": "git.unstage",
    "when": "activeAuxiliary == 'workbench.view.scm' && auxiliaryBarFocus && !inputFocus"
  },
  {
    "key": "shift+cmd+backspace",
    "command": "git.clean",
    "when": "activeAuxiliary == 'workbench.view.scm' && auxiliaryBarFocus && !inputFocus"
  },
  {
    "key": "cmd+enter",
    "command": "git.stageSelectedRanges",
    "when": "activeAuxiliary == 'workbench.view.scm' && isInDiffEditor"
  },
  {
    "key": "cmd+backspace",
    "command": "git.unstageSelectedRanges",
    "when": "activeAuxiliary == 'workbench.view.scm' && isInDiffEditor"
  },
  {
    "key": "shift+cmd+backspace",
    "command": "git.revertSelectedRanges",
    "when": "activeAuxiliary == 'workbench.view.scm' && isInDiffEditor"
  },
  {
    "key": "shift+cmd+enter",
    "command": "git.commit",
    "when": "activeAuxiliary == 'workbench.view.scm' && auxiliaryBarFocus"
  },
  {
    "key": "ctrl+alt+cmd+enter",
    "command": "git.commitNoVerify",
    "when": "activeAuxiliary == 'workbench.view.scm' && auxiliaryBarFocus"
  },

  // copilot
  {
    "key": "alt+/",
    "command": "github.copilot.nextPanelSolution"
  },

  // git
  {
    "key": "cmd+g shift+cmd+f",
    "command": "git.fetch"
  },
  {
    "key": "cmd+g shift+cmd+p",
    "command": "git.pull"
  },
  {
    "key": "cmd+g ctrl+alt+cmd+p",
    "command": "git.pullRebase"
  },
  {
    "key": "cmd+g shift+cmd+u",
    "command": "git.push"
  },
  {
    "key": "cmd+g ctrl+alt+cmd+u",
    "command": "git.pushForce"
  },
  {
    "key": "cmd+g shift+cmd+c",
    "command": "git.checkout"
  },
  {
    "key": "cmd+g shift+cmd+m",
    "command": "git.merge"
  },
  {
    "key": "cmd+g ctrl+alt+cmd+m",
    "command": "git.mergeAbort"
  },
  {
    "key": "cmd+g shift+cmd+b",
    "command": "git.rebase"
  },
  {
    "key": "cmd+g ctrl+alt+cmd+b",
    "command": "git.rebaseAbort"
  },
  {
    "key": "cmd+g shift+cmd+d",
    "command": "git.deleteBranch"
  },
  {
    "key": "cmd+g shift+cmd+enter",
    "command": "git.commit"
  },
  {
    "key": "cmd+g ctrl+alt+cmd+enter",
    "command": "git.commitNoVerify"
  },
  {
    "key": "cmd+g shift+cmd+,",
    "command": "git.undoCommit"
  },
  {
    "key": "cmd+g shift+cmd+s",
    "command": "git.stashStaged"
  },
  {
    "key": "cmd+g ctrl+alt+cmd+s",
    "command": "git.stashIncludeUntracked"
  },
  {
    "key": "cmd+g shift+cmd+o",
    "command": "git.stashApply"
  },
  {
    "key": "cmd+g ctrl+alt+cmd+o",
    "command": "git.stashPop"
  },
  {
    "key": "cmd+g cmd+h",
    "command": "git.viewLineHistory"
  },
  {
    "key": "cmd+g shift+cmd+h",
    "command": "git.viewFileHistory"
  },
  {
    "key": "cmd+g ctrl+alt+cmd+h",
    "command": "git.viewHistory"
  },
  {
    "key": "cmd+g cmd+enter",
    "command": "git.stageAll"
  },
  {
    "key": "cmd+g cmd+backspace",
    "command": "git.unstageAll"
  },
  {
    "key": "cmd+g shift+cmd+backspace",
    "command": "git.cleanAll"
  },
  {
    "key": "cmd+g shift+cmd+r",
    "command": "git.refresh"
  },

  // restarts
  {
    "key": "ctrl+alt+cmd+l",
    "command": "workbench.action.reloadWindow"
  },
  {
    "key": "ctrl+alt+cmd+w",
    "command": "workbench.action.closeWindow"
  },
  {
    "key": "ctrl+alt+cmd+t",
    "command": "typescript.restartTsServer"
  },
  {
    "key": "ctrl+alt+cmd+e",
    "command": "eslint.restart"
  },
  {
    "key": "ctrl+alt+cmd+x",
    "command": "workbench.action.restartExtensionHost"
  },
  {
    "key": "ctrl+alt+cmd+u",
    "command": "update.restartToUpdate"
  },

  // settings
  {
    "key": "ctrl+alt+cmd+,",
    "command": "workbench.action.openSettingsJson"
  },
  {
    "key": "ctrl+alt+cmd+k",
    "command": "workbench.action.openGlobalKeybindingsFile"
  },
  {
    "key": "ctrl+alt+cmd+s",
    "command": "workbench.action.openSnippets"
  }
]
